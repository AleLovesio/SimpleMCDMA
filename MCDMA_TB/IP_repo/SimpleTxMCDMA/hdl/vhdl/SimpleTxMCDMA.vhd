-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SimpleTxMCDMA is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    TX_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    TX_stream_TVALID : OUT STD_LOGIC;
    TX_stream_TREADY : IN STD_LOGIC;
    TX_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    TX_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    TX_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    TX_stream_TDEST : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SimpleTxMCDMA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SimpleTxMCDMA_SimpleTxMCDMA,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1148,HLS_SYN_LUT=1866,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal channel_descr_addr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_addr_ce0 : STD_LOGIC;
    signal channel_descr_addr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_len_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_len_ce0 : STD_LOGIC;
    signal channel_descr_len_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_enable_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_enable_ce0 : STD_LOGIC;
    signal channel_descr_enable_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_232 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln12_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_enable_load_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_18_fu_192_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_18_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_len_load_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal channel_descr_addr_load_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_i_fu_208_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_i_i_reg_285 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_done : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_idle : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_ready : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TREADY : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TDEST : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln17_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal channel_descr_len_load_cast_fu_205_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal regslice_both_TX_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal TX_stream_TVALID_int_regslice : STD_LOGIC;
    signal TX_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_TX_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SimpleTxMCDMA_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        TX_stream_TREADY : IN STD_LOGIC;
        zext_ln17 : IN STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_len_load : IN STD_LOGIC_VECTOR (31 downto 0);
        sub_i_i : IN STD_LOGIC_VECTOR (32 downto 0);
        dataPkt_dest_V : IN STD_LOGIC_VECTOR (1 downto 0);
        TX_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        TX_stream_TVALID : OUT STD_LOGIC;
        TX_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        TX_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        TX_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        TX_stream_TDEST : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component SimpleTxMCDMA_s_axi_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        channel_descr_addr_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_addr_ce0 : IN STD_LOGIC;
        channel_descr_addr_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_len_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_len_ce0 : IN STD_LOGIC;
        channel_descr_len_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_enable_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_enable_ce0 : IN STD_LOGIC;
        channel_descr_enable_q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component SimpleTxMCDMA_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component SimpleTxMCDMA_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147 : component SimpleTxMCDMA_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start,
        ap_done => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_done,
        ap_idle => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_idle,
        ap_ready => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_ready,
        m_axi_mem_AWVALID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => ap_const_logic_0,
        m_axi_mem_AWADDR => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WVALID,
        m_axi_mem_WREADY => ap_const_logic_0,
        m_axi_mem_WDATA => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => ap_const_logic_0,
        m_axi_mem_RID => ap_const_lv1_0,
        m_axi_mem_RFIFONUM => mem_RFIFONUM,
        m_axi_mem_RUSER => ap_const_lv1_0,
        m_axi_mem_RRESP => ap_const_lv2_0,
        m_axi_mem_BVALID => ap_const_logic_0,
        m_axi_mem_BREADY => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        TX_stream_TREADY => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TREADY,
        zext_ln17 => channel_descr_addr_load_reg_274,
        channel_descr_len_load => channel_descr_len_load_reg_267,
        sub_i_i => sub_i_i_reg_285,
        dataPkt_dest_V => empty_18_reg_257,
        TX_stream_TDATA => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TDATA,
        TX_stream_TVALID => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID,
        TX_stream_TKEEP => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TKEEP,
        TX_stream_TSTRB => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TSTRB,
        TX_stream_TLAST => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TLAST,
        TX_stream_TDEST => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TDEST);

    s_axi_ctrl_s_axi_U : component SimpleTxMCDMA_s_axi_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_s_axi_ctrl_AWVALID,
        AWREADY => s_axi_s_axi_ctrl_AWREADY,
        AWADDR => s_axi_s_axi_ctrl_AWADDR,
        WVALID => s_axi_s_axi_ctrl_WVALID,
        WREADY => s_axi_s_axi_ctrl_WREADY,
        WDATA => s_axi_s_axi_ctrl_WDATA,
        WSTRB => s_axi_s_axi_ctrl_WSTRB,
        ARVALID => s_axi_s_axi_ctrl_ARVALID,
        ARREADY => s_axi_s_axi_ctrl_ARREADY,
        ARADDR => s_axi_s_axi_ctrl_ARADDR,
        RVALID => s_axi_s_axi_ctrl_RVALID,
        RREADY => s_axi_s_axi_ctrl_RREADY,
        RDATA => s_axi_s_axi_ctrl_RDATA,
        RRESP => s_axi_s_axi_ctrl_RRESP,
        BVALID => s_axi_s_axi_ctrl_BVALID,
        BREADY => s_axi_s_axi_ctrl_BREADY,
        BRESP => s_axi_s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        channel_descr_addr_address0 => channel_descr_addr_address0,
        channel_descr_addr_ce0 => channel_descr_addr_ce0,
        channel_descr_addr_q0 => channel_descr_addr_q0,
        channel_descr_len_address0 => channel_descr_len_address0,
        channel_descr_len_ce0 => channel_descr_len_ce0,
        channel_descr_len_q0 => channel_descr_len_q0,
        channel_descr_enable_address0 => channel_descr_enable_address0,
        channel_descr_enable_ce0 => channel_descr_enable_ce0,
        channel_descr_enable_q0 => channel_descr_enable_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mem_m_axi_U : component SimpleTxMCDMA_mem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARLEN => mem_ARLEN,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RFIFONUM => mem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => mem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => mem_BVALID,
        I_BREADY => ap_const_logic_0);

    regslice_both_TX_stream_V_data_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TDATA,
        vld_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID,
        ack_in => TX_stream_TREADY_int_regslice,
        data_out => TX_stream_TDATA,
        vld_out => regslice_both_TX_stream_V_data_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_data_V_U_apdone_blk);

    regslice_both_TX_stream_V_keep_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TKEEP,
        vld_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID,
        ack_in => regslice_both_TX_stream_V_keep_V_U_ack_in_dummy,
        data_out => TX_stream_TKEEP,
        vld_out => regslice_both_TX_stream_V_keep_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_keep_V_U_apdone_blk);

    regslice_both_TX_stream_V_strb_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TSTRB,
        vld_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID,
        ack_in => regslice_both_TX_stream_V_strb_V_U_ack_in_dummy,
        data_out => TX_stream_TSTRB,
        vld_out => regslice_both_TX_stream_V_strb_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_strb_V_U_apdone_blk);

    regslice_both_TX_stream_V_last_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TLAST,
        vld_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID,
        ack_in => regslice_both_TX_stream_V_last_V_U_ack_in_dummy,
        data_out => TX_stream_TLAST,
        vld_out => regslice_both_TX_stream_V_last_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_last_V_U_apdone_blk);

    regslice_both_TX_stream_V_dest_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TDEST,
        vld_in => grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID,
        ack_in => regslice_both_TX_stream_V_dest_V_U_ack_in_dummy,
        data_out => TX_stream_TDEST,
        vld_out => regslice_both_TX_stream_V_dest_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_98 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_fu_98 <= i_2_reg_232;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                channel_descr_addr_load_reg_274 <= channel_descr_addr_q0;
                channel_descr_len_load_reg_267 <= channel_descr_len_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                channel_descr_enable_load_reg_248 <= channel_descr_enable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (channel_descr_enable_q0 = ap_const_lv1_1))) then
                empty_18_reg_257 <= empty_18_fu_192_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_232 <= i_2_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                sub_i_i_reg_285 <= sub_i_i_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_175_p2 = ap_const_lv1_0))) then
                    zext_ln12_reg_237(2 downto 0) <= zext_ln12_fu_187_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_237(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, channel_descr_enable_q0, ap_CS_fsm_state5, ap_CS_fsm_state2, icmp_ln12_fu_175_p2, ap_CS_fsm_state3, mem_ARREADY, ap_CS_fsm_state13, ap_block_state13_on_subcall_done, ap_CS_fsm_state14, regslice_both_TX_stream_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_175_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (channel_descr_enable_q0 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    TX_stream_TVALID <= regslice_both_TX_stream_V_data_V_U_vld_out;
    TX_stream_TVALID_int_regslice <= grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TVALID;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(ap_block_state13_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state13_on_subcall_done)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(regslice_both_TX_stream_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(mem_ARREADY)
    begin
        if ((mem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state13_on_subcall_done_assign_proc : process(channel_descr_enable_load_reg_248, grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_done)
    begin
                ap_block_state13_on_subcall_done <= ((grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_done = ap_const_logic_0) and (channel_descr_enable_load_reg_248 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14, regslice_both_TX_stream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, regslice_both_TX_stream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    channel_descr_addr_address0 <= zext_ln12_reg_237(2 - 1 downto 0);

    channel_descr_addr_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_addr_ce0 <= ap_const_logic_1;
        else 
            channel_descr_addr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_enable_address0 <= zext_ln12_fu_187_p1(2 - 1 downto 0);

    channel_descr_enable_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            channel_descr_enable_ce0 <= ap_const_logic_1;
        else 
            channel_descr_enable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_len_address0 <= zext_ln12_reg_237(2 - 1 downto 0);

    channel_descr_len_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_len_ce0 <= ap_const_logic_1;
        else 
            channel_descr_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_len_load_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_descr_len_load_reg_267),33));
    empty_18_fu_192_p1 <= i_fu_98(2 - 1 downto 0);
    grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_TX_stream_TREADY <= (ap_CS_fsm_state13 and TX_stream_TREADY_int_regslice);
    grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start <= grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_ap_start_reg;
    i_2_fu_181_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv3_1));
    icmp_ln12_fu_175_p2 <= "1" when (i_fu_98 = ap_const_lv3_4) else "0";

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state5, channel_descr_enable_load_reg_248, ap_CS_fsm_state12, grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARADDR, mem_ARREADY, ap_CS_fsm_state13, zext_ln17_fu_195_p1)
    begin
        if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_ARADDR <= zext_ln17_fu_195_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (channel_descr_enable_load_reg_248 = ap_const_lv1_1)))) then 
            mem_ARADDR <= grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARADDR;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARLEN_assign_proc : process(ap_CS_fsm_state5, channel_descr_enable_load_reg_248, channel_descr_len_load_reg_267, ap_CS_fsm_state12, grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARLEN, mem_ARREADY, ap_CS_fsm_state13)
    begin
        if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_ARLEN <= channel_descr_len_load_reg_267;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (channel_descr_enable_load_reg_248 = ap_const_lv1_1)))) then 
            mem_ARLEN <= grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARLEN;
        else 
            mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state5, channel_descr_enable_load_reg_248, ap_CS_fsm_state12, grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARVALID, mem_ARREADY, ap_CS_fsm_state13)
    begin
        if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (channel_descr_enable_load_reg_248 = ap_const_lv1_1)))) then 
            mem_ARVALID <= grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_ARVALID;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(channel_descr_enable_load_reg_248, ap_CS_fsm_state12, grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_RREADY, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (channel_descr_enable_load_reg_248 = ap_const_lv1_1)))) then 
            mem_RREADY <= grp_SimpleTxMCDMA_Pipeline_VITIS_LOOP_17_2_fu_147_m_axi_mem_RREADY;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    sub_i_i_fu_208_p2 <= std_logic_vector(unsigned(channel_descr_len_load_cast_fu_205_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    zext_ln12_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_98),64));
    zext_ln17_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_descr_addr_load_reg_274),64));
end behav;
