-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SimpleTxMCDMA is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    TX_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    TX_stream_TVALID : OUT STD_LOGIC;
    TX_stream_TREADY : IN STD_LOGIC;
    TX_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    TX_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    TX_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    TX_stream_TDEST : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SimpleTxMCDMA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SimpleTxMCDMA_SimpleTxMCDMA,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1494,HLS_SYN_LUT=3442,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv30_80 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_rst_sw : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal channel_descr_addr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_addr_ce0 : STD_LOGIC;
    signal channel_descr_addr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_len_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_len_ce0 : STD_LOGIC;
    signal channel_descr_len_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_enable_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_enable_ce0 : STD_LOGIC;
    signal channel_descr_enable_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ce0 : STD_LOGIC;
    signal SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal keep_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal keep_table_ce0 : STD_LOGIC;
    signal keep_table_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal TX_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal len_remaining_13_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal len2_reg_304 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln24_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_331_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_593 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_enable_load_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal channel_descr_addr_load_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_fu_365_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln30_reg_623 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln30_1_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_1_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_fu_377_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln26_reg_632 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln_fu_386_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_637 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_60_fu_395_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_60_reg_643 : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_transfers_fu_399_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mem_transfers_reg_648 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln33_fu_459_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln33_reg_654 : STD_LOGIC_VECTOR (29 downto 0);
    signal len_remaining_4_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal len_remaining_4_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done : STD_LOGIC;
    signal icmp_ln33_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dataPkt_last_V_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataPkt_last_V_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_fu_525_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal len_reg_690 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal len_remaining_3_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal len_remaining_3_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln33_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal buffer_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_idle : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_ready : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_ce0 : STD_LOGIC;
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flush : STD_LOGIC;
    signal s_axi_s_axi_ctrl_flush_done : STD_LOGIC;
    signal m_axi_mem_flush_done : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RFIFONUM : STD_LOGIC_VECTOR (11 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal dataPkt_dest_V_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal regslice_both_TX_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal icmp_ln30_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_transfers5_reg_270 : STD_LOGIC_VECTOR (23 downto 0);
    signal len_remaining_26_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_len_remaining_13_phi_fu_295_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_len2_phi_fu_308_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln38_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ret_V_fu_337_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln30_cast_fu_347_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1023_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln30_cast_cast_fu_357_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln30_fu_361_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln32_fu_382_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln33_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_1_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_443_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln33_cast_fu_433_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln38_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln2_fu_491_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_fu_499_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_fu_504_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_fu_542_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln41_fu_546_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln41_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal TX_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal TX_stream_TVALID_int_regslice : STD_LOGIC;
    signal TX_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_TX_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal TX_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_TX_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_TX_stream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_TX_stream_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_TX_stream_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SimpleTxMCDMA_SimpleTxMCDMA_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (11 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mem_transfers5 : IN STD_LOGIC_VECTOR (22 downto 0);
        channel_descr_addr_load : IN STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_addr_load_cast : IN STD_LOGIC_VECTOR (1 downto 0);
        shl_ln : IN STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SimpleTxMCDMA_SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SimpleTxMCDMA_keep_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component SimpleTxMCDMA_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SimpleTxMCDMA_s_axi_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        sw_reset : OUT STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        channel_descr_addr_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_addr_ce0 : IN STD_LOGIC;
        channel_descr_addr_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_len_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_len_ce0 : IN STD_LOGIC;
        channel_descr_len_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_enable_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_enable_ce0 : IN STD_LOGIC;
        channel_descr_enable_q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flush : OUT STD_LOGIC;
        flush_done : IN STD_LOGIC );
    end component;


    component SimpleTxMCDMA_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        flush : IN STD_LOGIC;
        flush_done : OUT STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component SimpleTxMCDMA_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_U : component SimpleTxMCDMA_SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_address0,
        ce0 => SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ce0,
        q0 => SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_q0);

    keep_table_U : component SimpleTxMCDMA_keep_table_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => keep_table_address0,
        ce0 => keep_table_ce0,
        q0 => keep_table_q0);

    buffer_U : component SimpleTxMCDMA_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_d0,
        q0 => buffer_q0);

    grp_SimpleTxMCDMA_Pipeline_1_fu_315 : component SimpleTxMCDMA_SimpleTxMCDMA_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start,
        ap_done => grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done,
        ap_idle => grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_idle,
        ap_ready => grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_ready,
        m_axi_mem_AWVALID => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => ap_const_logic_0,
        m_axi_mem_AWADDR => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WVALID,
        m_axi_mem_WREADY => ap_const_logic_0,
        m_axi_mem_WDATA => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => ap_const_logic_0,
        m_axi_mem_RID => ap_const_lv1_0,
        m_axi_mem_RFIFONUM => mem_RFIFONUM,
        m_axi_mem_RUSER => ap_const_lv1_0,
        m_axi_mem_RRESP => ap_const_lv2_0,
        m_axi_mem_BVALID => ap_const_logic_0,
        m_axi_mem_BREADY => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        mem_transfers5 => trunc_ln26_reg_632,
        channel_descr_addr_load => channel_descr_addr_load_reg_617,
        channel_descr_addr_load_cast => empty_60_reg_643,
        shl_ln => shl_ln_reg_637,
        buffer_r_address0 => grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_address0,
        buffer_r_ce0 => grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_ce0,
        buffer_r_we0 => grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_we0,
        buffer_r_d0 => grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_d0);

    s_axi_ctrl_s_axi_U : component SimpleTxMCDMA_s_axi_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_s_axi_ctrl_AWVALID,
        AWREADY => s_axi_s_axi_ctrl_AWREADY,
        AWADDR => s_axi_s_axi_ctrl_AWADDR,
        WVALID => s_axi_s_axi_ctrl_WVALID,
        WREADY => s_axi_s_axi_ctrl_WREADY,
        WDATA => s_axi_s_axi_ctrl_WDATA,
        WSTRB => s_axi_s_axi_ctrl_WSTRB,
        ARVALID => s_axi_s_axi_ctrl_ARVALID,
        ARREADY => s_axi_s_axi_ctrl_ARREADY,
        ARADDR => s_axi_s_axi_ctrl_ARADDR,
        RVALID => s_axi_s_axi_ctrl_RVALID,
        RREADY => s_axi_s_axi_ctrl_RREADY,
        RDATA => s_axi_s_axi_ctrl_RDATA,
        RRESP => s_axi_s_axi_ctrl_RRESP,
        BVALID => s_axi_s_axi_ctrl_BVALID,
        BREADY => s_axi_s_axi_ctrl_BREADY,
        BRESP => s_axi_s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        sw_reset => ap_rst_sw,
        ACLK_EN => ap_const_logic_1,
        channel_descr_addr_address0 => channel_descr_addr_address0,
        channel_descr_addr_ce0 => channel_descr_addr_ce0,
        channel_descr_addr_q0 => channel_descr_addr_q0,
        channel_descr_len_address0 => channel_descr_len_address0,
        channel_descr_len_ce0 => channel_descr_len_ce0,
        channel_descr_len_q0 => channel_descr_len_q0,
        channel_descr_enable_address0 => channel_descr_enable_address0,
        channel_descr_enable_ce0 => channel_descr_enable_ce0,
        channel_descr_enable_q0 => channel_descr_enable_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flush => flush,
        flush_done => s_axi_s_axi_ctrl_flush_done);

    mem_m_axi_U : component SimpleTxMCDMA_mem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 12,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        flush => flush,
        flush_done => m_axi_mem_flush_done,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARADDR,
        I_ARLEN => grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARLEN,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RFIFONUM => mem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => mem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => mem_BVALID,
        I_BREADY => ap_const_logic_0);

    regslice_both_TX_stream_V_data_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => TX_stream_TDATA_int_regslice,
        vld_in => TX_stream_TVALID_int_regslice,
        ack_in => TX_stream_TREADY_int_regslice,
        data_out => TX_stream_TDATA,
        vld_out => regslice_both_TX_stream_V_data_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_data_V_U_apdone_blk);

    regslice_both_TX_stream_V_keep_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => TX_stream_TKEEP_int_regslice,
        vld_in => TX_stream_TVALID_int_regslice,
        ack_in => regslice_both_TX_stream_V_keep_V_U_ack_in_dummy,
        data_out => TX_stream_TKEEP,
        vld_out => regslice_both_TX_stream_V_keep_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_keep_V_U_apdone_blk);

    regslice_both_TX_stream_V_strb_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => TX_stream_TVALID_int_regslice,
        ack_in => regslice_both_TX_stream_V_strb_V_U_ack_in_dummy,
        data_out => TX_stream_TSTRB,
        vld_out => regslice_both_TX_stream_V_strb_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_strb_V_U_apdone_blk);

    regslice_both_TX_stream_V_last_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dataPkt_last_V_reg_673,
        vld_in => TX_stream_TVALID_int_regslice,
        ack_in => regslice_both_TX_stream_V_last_V_U_ack_in_dummy,
        data_out => TX_stream_TLAST,
        vld_out => regslice_both_TX_stream_V_last_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_last_V_U_apdone_blk);

    regslice_both_TX_stream_V_dest_V_U : component SimpleTxMCDMA_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dataPkt_dest_V_reg_257,
        vld_in => TX_stream_TVALID_int_regslice,
        ack_in => regslice_both_TX_stream_V_dest_V_U_ack_in_dummy,
        data_out => TX_stream_TDEST,
        vld_out => regslice_both_TX_stream_V_dest_V_U_vld_out,
        ack_out => TX_stream_TREADY,
        apdone_blk => regslice_both_TX_stream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln33_1_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln33_1_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dataPkt_dest_V_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((((icmp_ln22_fu_576_p2 = ap_const_lv1_0) and (icmp_ln30_1_reg_628 = ap_const_lv1_1)) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_0) and (icmp_ln30_fu_572_p2 = ap_const_lv1_1))) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_0) and (channel_descr_enable_load_reg_598 = ap_const_lv1_0))))) then 
                dataPkt_dest_V_reg_257 <= i_reg_593;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                dataPkt_dest_V_reg_257 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    len2_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_1_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then 
                len2_reg_304 <= ap_const_lv30_0;
            elsif (((icmp_ln33_reg_700 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                len2_reg_304 <= len_reg_690;
            end if; 
        end if;
    end process;

    len_remaining_13_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_1_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then 
                len_remaining_13_reg_292 <= len_remaining_26_reg_282;
            elsif (((icmp_ln33_reg_700 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                len_remaining_13_reg_292 <= len_remaining_3_reg_695;
            end if; 
        end if;
    end process;

    len_remaining_26_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_1_fu_371_p2 = ap_const_lv1_0))) then 
                len_remaining_26_reg_282 <= channel_descr_len_q0;
            elsif (((icmp_ln30_fu_572_p2 = ap_const_lv1_0) and (regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln30_1_reg_628 = ap_const_lv1_0) and (channel_descr_enable_load_reg_598 = ap_const_lv1_1))) then 
                len_remaining_26_reg_282 <= len_remaining_4_reg_659;
            end if; 
        end if;
    end process;

    mem_transfers5_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_1_fu_371_p2 = ap_const_lv1_0))) then 
                mem_transfers5_reg_270 <= ap_const_lv24_0;
            elsif (((icmp_ln30_fu_572_p2 = ap_const_lv1_0) and (regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln30_1_reg_628 = ap_const_lv1_0) and (channel_descr_enable_load_reg_598 = ap_const_lv1_1))) then 
                mem_transfers5_reg_270 <= mem_transfers_reg_648;
            end if; 
        end if;
    end process;

    s_axi_s_axi_ctrl_flush_done_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            s_axi_s_axi_ctrl_flush_done <= (m_axi_mem_flush_done);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln30_reg_623 <= add_ln30_fu_365_p2;
                channel_descr_addr_load_reg_617 <= channel_descr_addr_q0;
                icmp_ln30_1_reg_628 <= icmp_ln30_1_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                channel_descr_enable_load_reg_598 <= channel_descr_enable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dataPkt_last_V_reg_673 <= dataPkt_last_V_fu_519_p2;
                icmp_ln33_reg_700 <= icmp_ln33_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_60_reg_643 <= empty_60_fu_395_p1;
                    shl_ln_reg_637(9) <= shl_ln_fu_386_p3(9);
                trunc_ln26_reg_632 <= trunc_ln26_fu_377_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_593 <= i_fu_331_p2;
                    zext_ln24_reg_582(1 downto 0) <= zext_ln24_fu_326_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                len_reg_690 <= len_fu_525_p2;
                len_remaining_3_reg_695 <= len_remaining_3_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then
                len_remaining_4_reg_659 <= len_remaining_4_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mem_transfers_reg_648 <= mem_transfers_fu_399_p2;
                select_ln33_reg_654 <= select_ln33_fu_459_p3;
            end if;
        end if;
    end process;
    zext_ln24_reg_582(31 downto 2) <= "000000000000000000000000000000";
    shl_ln_reg_637(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, channel_descr_enable_q0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, channel_descr_enable_load_reg_598, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln30_1_fu_371_p2, icmp_ln30_1_reg_628, ap_CS_fsm_state6, grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done, icmp_ln33_1_fu_481_p2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state10, regslice_both_TX_stream_V_data_V_U_apdone_blk, icmp_ln30_fu_572_p2, icmp_ln22_fu_576_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (channel_descr_enable_q0 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_1_fu_371_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln33_1_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln33_1_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (icmp_ln30_1_reg_628 = ap_const_lv1_1)) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (icmp_ln30_fu_572_p2 = ap_const_lv1_1))) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (channel_descr_enable_load_reg_598 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((((icmp_ln22_fu_576_p2 = ap_const_lv1_0) and (icmp_ln30_1_reg_628 = ap_const_lv1_1)) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_0) and (icmp_ln30_fu_572_p2 = ap_const_lv1_1))) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_0) and (channel_descr_enable_load_reg_598 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln30_fu_572_p2 = ap_const_lv1_0) and (regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln30_1_reg_628 = ap_const_lv1_0) and (channel_descr_enable_load_reg_598 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_address0 <= ap_phi_mux_len_remaining_13_phi_fu_295_p4(3 - 1 downto 0);

    SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ce0 <= ap_const_logic_1;
        else 
            SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    TX_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, TX_stream_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            TX_stream_TDATA_blk_n <= TX_stream_TREADY_int_regslice;
        else 
            TX_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    TX_stream_TDATA_int_regslice <= (sext_ln41_fu_553_p1 and buffer_q0);
    TX_stream_TKEEP_int_regslice <= 
        keep_table_q0 when (dataPkt_last_V_reg_673(0) = '1') else 
        ap_const_lv4_F;
    TX_stream_TVALID <= regslice_both_TX_stream_V_data_V_U_vld_out;

    TX_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            TX_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            TX_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln30_fu_365_p2 <= std_logic_vector(unsigned(lshr_ln30_cast_cast_fu_357_p1) + unsigned(zext_ln30_fu_361_p1));
    add_ln33_fu_427_p2 <= std_logic_vector(unsigned(select_ln33_1_fu_419_p3) + unsigned(len_remaining_26_reg_282));
    add_ln38_fu_499_p2 <= std_logic_vector(unsigned(shl_ln2_fu_491_p3) + unsigned(shl_ln_reg_637));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state10_blk_assign_proc : process(regslice_both_TX_stream_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done)
    begin
        if ((grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, TX_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_0 = TX_stream_TREADY_int_regslice) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = TX_stream_TREADY_int_regslice) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, TX_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = TX_stream_TREADY_int_regslice) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = TX_stream_TREADY_int_regslice) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, TX_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = TX_stream_TREADY_int_regslice) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = TX_stream_TREADY_int_regslice) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter1_assign_proc : process(TX_stream_TREADY_int_regslice)
    begin
                ap_block_state8_pp0_stage0_iter1 <= (ap_const_logic_0 = TX_stream_TREADY_int_regslice);
    end process;


    ap_block_state9_pp0_stage0_iter2_assign_proc : process(TX_stream_TREADY_int_regslice)
    begin
                ap_block_state9_pp0_stage0_iter2 <= (ap_const_logic_0 = TX_stream_TREADY_int_regslice);
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_537_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln33_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(channel_descr_enable_load_reg_598, icmp_ln30_1_reg_628, ap_CS_fsm_state10, regslice_both_TX_stream_V_data_V_U_apdone_blk, icmp_ln30_fu_572_p2, icmp_ln22_fu_576_p2)
    begin
        if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (icmp_ln30_1_reg_628 = ap_const_lv1_1)) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (icmp_ln30_fu_572_p2 = ap_const_lv1_1))) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (channel_descr_enable_load_reg_598 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_len2_phi_fu_308_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, len2_reg_304, len_reg_690, icmp_ln33_reg_700)
    begin
        if (((icmp_ln33_reg_700 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_len2_phi_fu_308_p4 <= len_reg_690;
        else 
            ap_phi_mux_len2_phi_fu_308_p4 <= len2_reg_304;
        end if; 
    end process;


    ap_phi_mux_len_remaining_13_phi_fu_295_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, len_remaining_13_reg_292, len_remaining_3_reg_695, icmp_ln33_reg_700)
    begin
        if (((icmp_ln33_reg_700 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_len_remaining_13_phi_fu_295_p4 <= len_remaining_3_reg_695;
        else 
            ap_phi_mux_len_remaining_13_phi_fu_295_p4 <= len_remaining_13_reg_292;
        end if; 
    end process;


    ap_ready_assign_proc : process(channel_descr_enable_load_reg_598, icmp_ln30_1_reg_628, ap_CS_fsm_state10, regslice_both_TX_stream_V_data_V_U_apdone_blk, icmp_ln30_fu_572_p2, icmp_ln22_fu_576_p2)
    begin
        if (((regslice_both_TX_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (icmp_ln30_1_reg_628 = ap_const_lv1_1)) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (icmp_ln30_fu_572_p2 = ap_const_lv1_1))) or ((icmp_ln22_fu_576_p2 = ap_const_lv1_1) and (channel_descr_enable_load_reg_598 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n, ap_rst_sw)
    begin
        ap_rst_n_inv <= (not(ap_rst_n) or ap_rst_sw);
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state6, ap_enable_reg_pp0_iter0, grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_address0, zext_ln38_fu_514_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            buffer_address0 <= zext_ln38_fu_514_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_address0 <= grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state6, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_ce0 <= grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_CS_fsm_state6, grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_we0 <= grp_SimpleTxMCDMA_Pipeline_1_fu_315_buffer_r_we0;
        else 
            buffer_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    channel_descr_addr_address0 <= zext_ln24_reg_582(2 - 1 downto 0);

    channel_descr_addr_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_addr_ce0 <= ap_const_logic_1;
        else 
            channel_descr_addr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_enable_address0 <= zext_ln24_fu_326_p1(2 - 1 downto 0);

    channel_descr_enable_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            channel_descr_enable_ce0 <= ap_const_logic_1;
        else 
            channel_descr_enable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_len_address0 <= zext_ln24_reg_582(2 - 1 downto 0);

    channel_descr_len_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_len_ce0 <= ap_const_logic_1;
        else 
            channel_descr_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPkt_last_V_fu_519_p2 <= "1" when (signed(ap_phi_mux_len_remaining_13_phi_fu_295_p4) < signed(ap_const_lv32_5)) else "0";
    empty_60_fu_395_p1 <= channel_descr_addr_load_reg_617(2 - 1 downto 0);
    grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start <= grp_SimpleTxMCDMA_Pipeline_1_fu_315_ap_start_reg;
    i_fu_331_p2 <= std_logic_vector(unsigned(dataPkt_dest_V_reg_257) + unsigned(ap_const_lv2_1));
    icmp_fu_453_p2 <= "1" when (tmp_1_fu_443_p4 = ap_const_lv23_0) else "0";
    icmp_ln1023_fu_341_p2 <= "0" when (ret_V_fu_337_p1 = ap_const_lv9_0) else "1";
    icmp_ln22_fu_576_p2 <= "1" when (dataPkt_dest_V_reg_257 = ap_const_lv2_3) else "0";
    icmp_ln30_1_fu_371_p2 <= "1" when (add_ln30_fu_365_p2 = ap_const_lv24_0) else "0";
    icmp_ln30_fu_572_p2 <= "1" when (mem_transfers_reg_648 = add_ln30_reg_623) else "0";
    icmp_ln33_1_fu_481_p2 <= "1" when (select_ln33_fu_459_p3 = ap_const_lv30_0) else "0";
    icmp_ln33_fu_537_p2 <= "1" when (len_fu_525_p2 = select_ln33_reg_654) else "0";
    keep_table_address0 <= ap_phi_mux_len_remaining_13_phi_fu_295_p4(3 - 1 downto 0);

    keep_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            keep_table_ce0 <= ap_const_logic_1;
        else 
            keep_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    len_fu_525_p2 <= std_logic_vector(unsigned(ap_phi_mux_len2_phi_fu_308_p4) + unsigned(ap_const_lv30_1));
    len_remaining_3_fu_531_p2 <= std_logic_vector(unsigned(ap_phi_mux_len_remaining_13_phi_fu_295_p4) + unsigned(ap_const_lv32_FFFFFFFC));
    len_remaining_4_fu_475_p2 <= std_logic_vector(unsigned(len_remaining_26_reg_282) - unsigned(shl_ln1_fu_467_p3));
    lshr_ln30_cast_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln30_cast_fu_347_p4),24));
    lshr_ln30_cast_fu_347_p4 <= channel_descr_len_q0(31 downto 9);
    lshr_ln33_cast_fu_433_p4 <= add_ln33_fu_427_p2(31 downto 2);
    lshr_ln_fu_504_p4 <= add_ln38_fu_499_p2(9 downto 2);

    mem_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_ARVALID <= grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_ARVALID;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_RREADY <= grp_SimpleTxMCDMA_Pipeline_1_fu_315_m_axi_mem_RREADY;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    mem_transfers_fu_399_p2 <= std_logic_vector(unsigned(mem_transfers5_reg_270) + unsigned(ap_const_lv24_1));
    ret_V_fu_337_p1 <= channel_descr_len_q0(9 - 1 downto 0);
    select_ln33_1_fu_419_p3 <= 
        sub_ln33_fu_413_p2 when (tmp_fu_405_p3(0) = '1') else 
        ap_const_lv32_3;
    select_ln33_fu_459_p3 <= 
        lshr_ln33_cast_fu_433_p4 when (icmp_fu_453_p2(0) = '1') else 
        ap_const_lv30_80;
    select_ln41_fu_546_p3 <= 
        trunc_ln45_fu_542_p1 when (dataPkt_last_V_reg_673(0) = '1') else 
        ap_const_lv25_1FFFFFF;
        sext_ln41_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln41_fu_546_p3),32));

    shl_ln1_fu_467_p3 <= (select_ln33_fu_459_p3 & ap_const_lv2_0);
    shl_ln2_fu_491_p3 <= (trunc_ln38_fu_487_p1 & ap_const_lv2_0);
    shl_ln_fu_386_p3 <= (trunc_ln32_fu_382_p1 & ap_const_lv9_0);
    sub_ln33_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) - unsigned(len_remaining_26_reg_282));
    tmp_1_fu_443_p4 <= add_ln33_fu_427_p2(31 downto 9);
    tmp_fu_405_p3 <= len_remaining_26_reg_282(31 downto 31);
    trunc_ln26_fu_377_p1 <= mem_transfers5_reg_270(23 - 1 downto 0);
    trunc_ln32_fu_382_p1 <= mem_transfers5_reg_270(1 - 1 downto 0);
    trunc_ln38_fu_487_p1 <= ap_phi_mux_len2_phi_fu_308_p4(8 - 1 downto 0);
    trunc_ln45_fu_542_p1 <= SimpleTxMCDMA_unsigned_int_stream_axis_0_channel_descr_t_data_mask_q0(25 - 1 downto 0);
    zext_ln24_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataPkt_dest_V_reg_257),32));
    zext_ln30_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1023_fu_341_p2),24));
    zext_ln38_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_504_p4),32));
end behav;
