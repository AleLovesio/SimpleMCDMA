-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_25_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    n_remaining_channels_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    RX_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    RX_stream_TVALID : IN STD_LOGIC;
    RX_stream_TREADY : OUT STD_LOGIC;
    RX_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    RX_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    RX_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    RX_stream_TDEST : IN STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_enable_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_enable_ce0 : OUT STD_LOGIC;
    channel_descr_enable_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    channel_descr_addr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_addr_ce0 : OUT STD_LOGIC;
    channel_descr_addr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    channel_descr_transfered_data_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_transfered_data_ce0 : OUT STD_LOGIC;
    channel_descr_transfered_data_we0 : OUT STD_LOGIC;
    channel_descr_transfered_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    channel_descr_transfered_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    channel_descr_len_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_len_ce0 : OUT STD_LOGIC;
    channel_descr_len_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    channel_descr_done_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_done_ce0 : OUT STD_LOGIC;
    channel_descr_done_we0 : OUT STD_LOGIC;
    channel_descr_done_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    channel_descr_error_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    channel_descr_error_ce0 : OUT STD_LOGIC;
    channel_descr_error_we0 : OUT STD_LOGIC;
    channel_descr_error_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_25_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal channel_descr_enable_load_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_enable_load_reg_348_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op89_write_state6 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln57_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal mem_blk_n_B : STD_LOGIC;
    signal channel_descr_enable_load_reg_348_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_367_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal RX_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_data_V_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_data_V_reg_323_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_predicate_op88_writereq_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_predicate_op94_writeresp_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal channel_descr_transfered_data_addr_reg_357 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1027_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln1027_reg_367_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_error_addr_1_gep_fu_185_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln35_fu_256_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln35_reg_381 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln1019_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_error_addr_2_gep_fu_220_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln57_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_400_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_400_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_300_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln35_reg_404 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal sext_ln35_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal n_remaining_channels_fu_92 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_remaining_channels_1_fu_276_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_n_remaining_channels_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal add_ln840_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_1_fu_296_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_488 : BOOLEAN;
    signal ap_condition_493 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component SimpleRxMCDMA_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component SimpleRxMCDMA_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1)))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    n_remaining_channels_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                n_remaining_channels_fu_92 <= n_remaining_channels_reload;
            elsif (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1019_fu_267_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                n_remaining_channels_fu_92 <= n_remaining_channels_1_fu_276_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_367 = ap_const_lv1_1))) then
                add_ln35_reg_404 <= add_ln35_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                channel_descr_enable_load_reg_348 <= channel_descr_enable_q0;
                channel_descr_enable_load_reg_348_pp0_iter1_reg <= channel_descr_enable_load_reg_348;
                channel_descr_enable_load_reg_348_pp0_iter2_reg <= channel_descr_enable_load_reg_348_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (channel_descr_enable_q0 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                channel_descr_transfered_data_addr_reg_357 <= zext_ln31_reg_332(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                icmp_ln1027_reg_367 <= icmp_ln1027_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                icmp_ln1027_reg_367_pp0_iter1_reg <= icmp_ln1027_reg_367;
                icmp_ln1027_reg_367_pp0_iter2_reg <= icmp_ln1027_reg_367_pp0_iter1_reg;
                icmp_ln57_reg_400 <= icmp_ln57_fu_290_p2;
                icmp_ln57_reg_400_pp0_iter1_reg <= icmp_ln57_reg_400;
                icmp_ln57_reg_400_pp0_iter2_reg <= icmp_ln57_reg_400_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_reg_323 <= RX_stream_TDATA;
                tmp_data_V_reg_323_pp0_iter1_reg <= tmp_data_V_reg_323;
                tmp_last_V_reg_328 <= RX_stream_TLAST;
                    zext_ln31_reg_332(1 downto 0) <= zext_ln31_fu_245_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln35_reg_381 <= trunc_ln35_fu_256_p1;
            end if;
        end if;
    end process;
    zext_ln31_reg_332(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter3_stage1, ap_idle_pp0_0to2, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    RX_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, RX_stream_TVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            RX_stream_TDATA_blk_n <= RX_stream_TVALID;
        else 
            RX_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    RX_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            RX_stream_TREADY <= ap_const_logic_1;
        else 
            RX_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln35_fu_300_p2 <= std_logic_vector(unsigned(trunc_ln35_1_fu_296_p1) + unsigned(trunc_ln35_reg_381));
    add_ln840_fu_260_p2 <= std_logic_vector(unsigned(channel_descr_transfered_data_q0) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RX_stream_TVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = RX_stream_TVALID) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RX_stream_TVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = RX_stream_TVALID) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, m_axi_mem_BVALID, ap_block_state5_io, ap_predicate_op94_writeresp_state11)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_mem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op94_writeresp_state11 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, m_axi_mem_BVALID, ap_block_state5_io, ap_predicate_op94_writeresp_state11)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_mem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op94_writeresp_state11 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage1_iter3_assign_proc : process(m_axi_mem_BVALID, ap_predicate_op94_writeresp_state11)
    begin
                ap_block_state11_pp0_stage1_iter3 <= ((m_axi_mem_BVALID = ap_const_logic_0) and (ap_predicate_op94_writeresp_state11 = ap_const_boolean_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(RX_stream_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_const_logic_0 = RX_stream_TVALID);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_mem_AWREADY, ap_predicate_op88_writereq_state5)
    begin
                ap_block_state5_io <= ((m_axi_mem_AWREADY = ap_const_logic_0) and (ap_predicate_op88_writereq_state5 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_mem_WREADY, ap_predicate_op89_write_state6)
    begin
                ap_block_state6_io <= ((m_axi_mem_WREADY = ap_const_logic_0) and (ap_predicate_op89_write_state6 = ap_const_boolean_1));
    end process;

        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_488_assign_proc : process(ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, ap_block_pp0_stage2, icmp_ln1027_fu_250_p2)
    begin
                ap_condition_488 <= ((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2));
    end process;


    ap_condition_493_assign_proc : process(ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, ap_block_pp0_stage2, tmp_last_V_reg_328, icmp_ln1027_fu_250_p2, icmp_ln1019_fu_267_p2)
    begin
                ap_condition_493 <= ((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1019_fu_267_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (tmp_last_V_reg_328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln57_fu_290_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln57_fu_290_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, icmp_ln57_reg_400_pp0_iter2_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln57_reg_400_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op88_writereq_state5_assign_proc : process(channel_descr_enable_load_reg_348, icmp_ln1027_reg_367)
    begin
                ap_predicate_op88_writereq_state5 <= ((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1027_reg_367 = ap_const_lv1_1));
    end process;


    ap_predicate_op89_write_state6_assign_proc : process(channel_descr_enable_load_reg_348_pp0_iter1_reg, icmp_ln1027_reg_367)
    begin
                ap_predicate_op89_write_state6 <= ((channel_descr_enable_load_reg_348_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln1027_reg_367 = ap_const_lv1_1));
    end process;


    ap_predicate_op94_writeresp_state11_assign_proc : process(channel_descr_enable_load_reg_348_pp0_iter2_reg, icmp_ln1027_reg_367_pp0_iter2_reg)
    begin
                ap_predicate_op94_writeresp_state11 <= ((icmp_ln1027_reg_367_pp0_iter2_reg = ap_const_lv1_1) and (channel_descr_enable_load_reg_348_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_remaining_channels_2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, ap_block_pp0_stage2, icmp_ln1027_fu_250_p2, icmp_ln1019_fu_267_p2, n_remaining_channels_fu_92, n_remaining_channels_1_fu_276_p2)
    begin
        if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1019_fu_267_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            ap_sig_allocacmp_n_remaining_channels_2 <= n_remaining_channels_1_fu_276_p2;
        else 
            ap_sig_allocacmp_n_remaining_channels_2 <= n_remaining_channels_fu_92;
        end if; 
    end process;

    channel_descr_addr_address0 <= zext_ln31_reg_332(2 - 1 downto 0);

    channel_descr_addr_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            channel_descr_addr_ce0 <= ap_const_logic_1;
        else 
            channel_descr_addr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_done_address0 <= zext_ln31_reg_332(2 - 1 downto 0);

    channel_descr_done_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            channel_descr_done_ce0 <= ap_const_logic_1;
        else 
            channel_descr_done_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_done_d0 <= ap_const_lv1_1;

    channel_descr_done_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, icmp_ln1027_fu_250_p2, ap_block_pp0_stage2_11001, icmp_ln1019_fu_267_p2)
    begin
        if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1019_fu_267_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            channel_descr_done_we0 <= ap_const_logic_1;
        else 
            channel_descr_done_we0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_enable_address0 <= zext_ln31_fu_245_p1(2 - 1 downto 0);

    channel_descr_enable_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            channel_descr_enable_ce0 <= ap_const_logic_1;
        else 
            channel_descr_enable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_error_addr_1_gep_fu_185_p3 <= zext_ln31_reg_332(2 - 1 downto 0);
    channel_descr_error_addr_2_gep_fu_220_p3 <= zext_ln31_reg_332(2 - 1 downto 0);

    channel_descr_error_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln31_reg_332, channel_descr_error_addr_1_gep_fu_185_p3, channel_descr_error_addr_2_gep_fu_220_p3, ap_condition_488, ap_condition_493)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_493)) then 
                channel_descr_error_address0 <= channel_descr_error_addr_2_gep_fu_220_p3;
            elsif ((ap_const_boolean_1 = ap_condition_488)) then 
                channel_descr_error_address0 <= channel_descr_error_addr_1_gep_fu_185_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                channel_descr_error_address0 <= zext_ln31_reg_332(2 - 1 downto 0);
            else 
                channel_descr_error_address0 <= "XX";
            end if;
        else 
            channel_descr_error_address0 <= "XX";
        end if; 
    end process;


    channel_descr_error_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, tmp_last_V_reg_328, ap_block_pp0_stage1_11001, icmp_ln1027_fu_250_p2, ap_block_pp0_stage2_11001, icmp_ln1019_fu_267_p2)
    begin
        if ((((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1019_fu_267_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_last_V_reg_328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            channel_descr_error_ce0 <= ap_const_logic_1;
        else 
            channel_descr_error_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_error_d0 <= ap_const_lv1_1;

    channel_descr_error_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, channel_descr_enable_q0, ap_CS_fsm_pp0_stage1, tmp_last_V_reg_328, ap_block_pp0_stage1_11001, icmp_ln1027_fu_250_p2, ap_block_pp0_stage2_11001, icmp_ln1019_fu_267_p2)
    begin
        if ((((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1019_fu_267_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_last_V_reg_328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (channel_descr_enable_q0 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            channel_descr_error_we0 <= ap_const_logic_1;
        else 
            channel_descr_error_we0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_len_address0 <= zext_ln31_reg_332(2 - 1 downto 0);

    channel_descr_len_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            channel_descr_len_ce0 <= ap_const_logic_1;
        else 
            channel_descr_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_transfered_data_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln31_reg_332, channel_descr_transfered_data_addr_reg_357)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                channel_descr_transfered_data_address0 <= channel_descr_transfered_data_addr_reg_357;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                channel_descr_transfered_data_address0 <= zext_ln31_reg_332(2 - 1 downto 0);
            else 
                channel_descr_transfered_data_address0 <= "XX";
            end if;
        else 
            channel_descr_transfered_data_address0 <= "XX";
        end if; 
    end process;


    channel_descr_transfered_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            channel_descr_transfered_data_ce0 <= ap_const_logic_1;
        else 
            channel_descr_transfered_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_transfered_data_d0 <= add_ln840_fu_260_p2;

    channel_descr_transfered_data_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, channel_descr_enable_load_reg_348, icmp_ln1027_fu_250_p2, ap_block_pp0_stage2_11001)
    begin
        if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            channel_descr_transfered_data_we0 <= ap_const_logic_1;
        else 
            channel_descr_transfered_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1019_fu_267_p2 <= "1" when (add_ln840_fu_260_p2 = channel_descr_len_q0) else "0";
    icmp_ln1027_fu_250_p2 <= "1" when (unsigned(channel_descr_transfered_data_q0) < unsigned(channel_descr_len_q0)) else "0";
    icmp_ln57_fu_290_p2 <= "1" when (ap_sig_allocacmp_n_remaining_channels_2 = ap_const_lv8_0) else "0";
    m_axi_mem_ARADDR <= ap_const_lv32_0;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_0;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;
    m_axi_mem_ARVALID <= ap_const_logic_0;
    m_axi_mem_AWADDR <= sext_ln35_fu_305_p1;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_1;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;

    m_axi_mem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op88_writereq_state5, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op88_writereq_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_mem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_predicate_op94_writeresp_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op94_writeresp_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_mem_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_RREADY <= ap_const_logic_0;
    m_axi_mem_WDATA <= tmp_data_V_reg_323_pp0_iter1_reg;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_F;
    m_axi_mem_WUSER <= ap_const_lv1_0;

    m_axi_mem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_predicate_op89_write_state6, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op89_write_state6 = ap_const_boolean_1))) then 
            m_axi_mem_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_AWREADY, channel_descr_enable_load_reg_348, icmp_ln1027_reg_367, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((channel_descr_enable_load_reg_348 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln1027_reg_367 = ap_const_lv1_1))) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_mem_BVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, channel_descr_enable_load_reg_348_pp0_iter2_reg, icmp_ln1027_reg_367_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1027_reg_367_pp0_iter2_reg = ap_const_lv1_1) and (channel_descr_enable_load_reg_348_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, m_axi_mem_WREADY, ap_predicate_op89_write_state6, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_predicate_op89_write_state6 = ap_const_boolean_1))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    n_remaining_channels_1_fu_276_p2 <= std_logic_vector(unsigned(n_remaining_channels_fu_92) + unsigned(ap_const_lv8_FF));
        sext_ln35_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_reg_404),32));

    trunc_ln35_1_fu_296_p1 <= channel_descr_addr_q0(30 - 1 downto 0);
    trunc_ln35_fu_256_p1 <= channel_descr_transfered_data_q0(30 - 1 downto 0);
    zext_ln31_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RX_stream_TDEST),32));
end behav;
