// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RX_stream_TVALID,
        dataPkt_data_V_1,
        dataPkt_keep_V_1,
        dataPkt_last_V_1,
        dataPkt_dest_V_1,
        channel_error,
        first,
        len_remaining_1,
        shl_ln1,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        RX_stream_TDATA,
        RX_stream_TREADY,
        RX_stream_TKEEP,
        RX_stream_TSTRB,
        RX_stream_TLAST,
        RX_stream_TDEST,
        tmp_dest_V,
        dataPkt_data_V_2_out,
        dataPkt_data_V_2_out_ap_vld,
        dataPkt_keep_V_2_out,
        dataPkt_keep_V_2_out_ap_vld,
        dataPkt_last_V_3_out,
        dataPkt_last_V_3_out_ap_vld,
        dataPkt_dest_V_3_out,
        dataPkt_dest_V_3_out_ap_vld,
        channel_error_1_out,
        channel_error_1_out_ap_vld,
        first_1_out,
        first_1_out_ap_vld,
        len_remaining_2_out,
        len_remaining_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   RX_stream_TVALID;
input  [31:0] dataPkt_data_V_1;
input  [3:0] dataPkt_keep_V_1;
input  [0:0] dataPkt_last_V_1;
input  [1:0] dataPkt_dest_V_1;
input  [0:0] channel_error;
input  [0:0] first;
input  [31:0] len_remaining_1;
input  [9:0] shl_ln1;
output  [7:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] RX_stream_TDATA;
output   RX_stream_TREADY;
input  [3:0] RX_stream_TKEEP;
input  [3:0] RX_stream_TSTRB;
input  [0:0] RX_stream_TLAST;
input  [1:0] RX_stream_TDEST;
input  [1:0] tmp_dest_V;
output  [31:0] dataPkt_data_V_2_out;
output   dataPkt_data_V_2_out_ap_vld;
output  [3:0] dataPkt_keep_V_2_out;
output   dataPkt_keep_V_2_out_ap_vld;
output  [0:0] dataPkt_last_V_3_out;
output   dataPkt_last_V_3_out_ap_vld;
output  [1:0] dataPkt_dest_V_3_out;
output   dataPkt_dest_V_3_out_ap_vld;
output  [0:0] channel_error_1_out;
output   channel_error_1_out_ap_vld;
output  [0:0] first_1_out;
output   first_1_out_ap_vld;
output  [31:0] len_remaining_2_out;
output   len_remaining_2_out_ap_vld;

reg ap_idle;
reg buffer_r_ce0;
reg buffer_r_we0;
reg RX_stream_TREADY;
reg dataPkt_data_V_2_out_ap_vld;
reg dataPkt_keep_V_2_out_ap_vld;
reg dataPkt_last_V_3_out_ap_vld;
reg dataPkt_dest_V_3_out_ap_vld;
reg channel_error_1_out_ap_vld;
reg first_1_out_ap_vld;
reg len_remaining_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] and_ln57_1_fu_387_p2;
reg   [0:0] ap_phi_mux_first_1_phi_fu_299_p4;
reg    ap_predicate_op50_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    RX_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] first_1_reg_296;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] and_ln57_1_reg_729;
reg   [7:0] lshr_ln_reg_733;
wire    ap_loop_init;
wire   [31:0] zext_ln112_fu_640_p1;
reg   [31:0] len_remaining_fu_138;
wire   [31:0] len_remaining_3_fu_615_p2;
reg   [63:0] len_fu_142;
wire   [63:0] add_ln57_fu_393_p2;
reg   [0:0] channel_error_1_fu_146;
wire   [0:0] channel_error_5_fu_420_p2;
wire   [0:0] channel_error_7_fu_582_p2;
reg   [0:0] ap_sig_allocacmp_channel_error_6;
reg   [1:0] dataPkt_dest_V_fu_150;
reg   [0:0] dataPkt_last_V_fu_154;
reg   [0:0] ap_sig_allocacmp_dataPkt_last_V_3;
reg   [3:0] dataPkt_keep_V_fu_158;
reg   [3:0] ap_sig_allocacmp_dataPkt_keep_V_3;
reg   [31:0] dataPkt_data_V_fu_162;
reg    ap_block_pp0_stage0_01001;
wire   [56:0] tmp_fu_353_p4;
wire   [0:0] icmp_ln57_1_fu_369_p2;
wire   [0:0] xor_ln57_fu_375_p2;
wire   [0:0] and_ln57_fu_381_p2;
wire   [0:0] icmp_ln57_fu_363_p2;
wire   [0:0] icmp_ln1023_fu_415_p2;
wire   [0:0] icmp_ln1023_1_fu_472_p2;
wire   [0:0] icmp_ln82_3_fu_502_p2;
wire   [0:0] icmp_ln82_2_fu_496_p2;
wire   [0:0] icmp_ln82_1_fu_490_p2;
wire   [0:0] or_ln82_fu_516_p2;
wire   [2:0] select_ln82_fu_508_p3;
wire   [2:0] select_ln82_1_fu_522_p3;
wire   [0:0] or_ln82_1_fu_538_p2;
wire   [0:0] icmp_ln82_fu_484_p2;
wire   [0:0] or_ln82_2_fu_544_p2;
wire   [2:0] select_ln82_2_fu_530_p3;
wire   [2:0] final_len_fu_550_p3;
wire   [31:0] zext_ln100_fu_558_p1;
wire   [0:0] icmp_ln100_fu_562_p2;
wire   [0:0] xor_ln1023_fu_466_p2;
wire   [0:0] icmp_ln75_fu_460_p2;
wire   [0:0] or_ln100_fu_568_p2;
wire   [0:0] and_ln107_fu_478_p2;
wire   [0:0] select_ln75_fu_574_p3;
wire   [7:0] trunc_ln112_fu_588_p1;
wire   [9:0] shl_ln2_fu_592_p3;
wire   [9:0] add_ln112_fu_600_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_425;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

SimpleRxMCDMA_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            channel_error_1_fu_146 <= channel_error;
        end else if (((1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            channel_error_1_fu_146 <= channel_error_7_fu_582_p2;
        end else if ((1'b1 == ap_condition_425)) begin
            channel_error_1_fu_146 <= channel_error_5_fu_420_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            dataPkt_data_V_fu_162 <= dataPkt_data_V_1;
        end else if ((1'b1 == ap_condition_425)) begin
            dataPkt_data_V_fu_162 <= RX_stream_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            dataPkt_dest_V_fu_150 <= dataPkt_dest_V_1;
        end else if ((1'b1 == ap_condition_425)) begin
            dataPkt_dest_V_fu_150 <= RX_stream_TDEST;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            dataPkt_keep_V_fu_158 <= dataPkt_keep_V_1;
        end else if ((1'b1 == ap_condition_425)) begin
            dataPkt_keep_V_fu_158 <= RX_stream_TKEEP;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            dataPkt_last_V_fu_154 <= dataPkt_last_V_1;
        end else if ((1'b1 == ap_condition_425)) begin
            dataPkt_last_V_fu_154 <= RX_stream_TLAST;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        first_1_reg_296 <= first;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln57_1_reg_729) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        first_1_reg_296 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            len_fu_142 <= 64'd0;
        end else if (((1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            len_fu_142 <= add_ln57_fu_393_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            len_remaining_fu_138 <= len_remaining_1;
        end else if (((1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            len_remaining_fu_138 <= len_remaining_3_fu_615_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln57_1_reg_729 <= and_ln57_1_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_733 <= {{add_ln112_fu_600_p2[9:2]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op50_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RX_stream_TDATA_blk_n = RX_stream_TVALID;
    end else begin
        RX_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op50_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RX_stream_TREADY = 1'b1;
    end else begin
        RX_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'd0 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln57_1_reg_729) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_first_1_phi_fu_299_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_1_phi_fu_299_p4 = first_1_reg_296;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_first_1_phi_fu_299_p4 == 1'd0) & (1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_channel_error_6 = channel_error_5_fu_420_p2;
    end else begin
        ap_sig_allocacmp_channel_error_6 = channel_error_1_fu_146;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_first_1_phi_fu_299_p4 == 1'd0) & (1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_dataPkt_keep_V_3 = RX_stream_TKEEP;
    end else begin
        ap_sig_allocacmp_dataPkt_keep_V_3 = dataPkt_keep_V_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_first_1_phi_fu_299_p4 == 1'd0) & (1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_dataPkt_last_V_3 = RX_stream_TLAST;
    end else begin
        ap_sig_allocacmp_dataPkt_last_V_3 = dataPkt_last_V_fu_154;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln57_1_reg_729) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        channel_error_1_out_ap_vld = 1'b1;
    end else begin
        channel_error_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataPkt_data_V_2_out_ap_vld = 1'b1;
    end else begin
        dataPkt_data_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataPkt_dest_V_3_out_ap_vld = 1'b1;
    end else begin
        dataPkt_dest_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataPkt_keep_V_2_out_ap_vld = 1'b1;
    end else begin
        dataPkt_keep_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataPkt_last_V_3_out_ap_vld = 1'b1;
    end else begin
        dataPkt_last_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_1_out_ap_vld = 1'b1;
    end else begin
        first_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln57_1_fu_387_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        len_remaining_2_out_ap_vld = 1'b1;
    end else begin
        len_remaining_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_600_p2 = (shl_ln2_fu_592_p3 + shl_ln1);

assign add_ln57_fu_393_p2 = (len_fu_142 + 64'd1);

assign and_ln107_fu_478_p2 = (icmp_ln1023_1_fu_472_p2 & ap_sig_allocacmp_dataPkt_last_V_3);

assign and_ln57_1_fu_387_p2 = (icmp_ln57_fu_363_p2 & and_ln57_fu_381_p2);

assign and_ln57_fu_381_p2 = (xor_ln57_fu_375_p2 & icmp_ln57_1_fu_369_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op50_read_state2 == 1'b1) & (1'b0 == RX_stream_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op50_read_state2 == 1'b1) & (1'b0 == RX_stream_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op50_read_state2 == 1'b1) & (1'b0 == RX_stream_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op50_read_state2 == 1'b1) & (1'b0 == RX_stream_TVALID));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_425 = ((ap_phi_mux_first_1_phi_fu_299_p4 == 1'd0) & (1'd1 == and_ln57_1_fu_387_p2) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op50_read_state2 = ((ap_phi_mux_first_1_phi_fu_299_p4 == 1'd0) & (1'd1 == and_ln57_1_fu_387_p2));
end

assign buffer_r_address0 = zext_ln112_fu_640_p1;

assign buffer_r_d0 = dataPkt_data_V_fu_162;

assign channel_error_1_out = channel_error_1_fu_146;

assign channel_error_5_fu_420_p2 = (icmp_ln1023_fu_415_p2 | channel_error_1_fu_146);

assign channel_error_7_fu_582_p2 = (select_ln75_fu_574_p3 | ap_sig_allocacmp_channel_error_6);

assign dataPkt_data_V_2_out = dataPkt_data_V_fu_162;

assign dataPkt_dest_V_3_out = dataPkt_dest_V_fu_150;

assign dataPkt_keep_V_2_out = dataPkt_keep_V_fu_158;

assign dataPkt_last_V_3_out = dataPkt_last_V_fu_154;

assign final_len_fu_550_p3 = ((or_ln82_2_fu_544_p2[0:0] == 1'b1) ? select_ln82_2_fu_530_p3 : 3'd0);

assign first_1_out = first_1_reg_296;

assign icmp_ln100_fu_562_p2 = ((len_remaining_fu_138 != zext_ln100_fu_558_p1) ? 1'b1 : 1'b0);

assign icmp_ln1023_1_fu_472_p2 = ((ap_sig_allocacmp_dataPkt_keep_V_3 != 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln1023_fu_415_p2 = ((RX_stream_TDEST != tmp_dest_V) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_369_p2 = (($signed(len_remaining_fu_138) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_363_p2 = (($signed(tmp_fu_353_p4) < $signed(57'd1)) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_460_p2 = (($signed(len_remaining_fu_138) < $signed(32'd5)) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_490_p2 = ((ap_sig_allocacmp_dataPkt_keep_V_3 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln82_2_fu_496_p2 = ((ap_sig_allocacmp_dataPkt_keep_V_3 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln82_3_fu_502_p2 = ((ap_sig_allocacmp_dataPkt_keep_V_3 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_484_p2 = ((ap_sig_allocacmp_dataPkt_keep_V_3 == 4'd14) ? 1'b1 : 1'b0);

assign len_remaining_2_out = len_remaining_fu_138;

assign len_remaining_3_fu_615_p2 = ($signed(len_remaining_fu_138) + $signed(32'd4294967292));

assign or_ln100_fu_568_p2 = (xor_ln1023_fu_466_p2 | icmp_ln100_fu_562_p2);

assign or_ln82_1_fu_538_p2 = (or_ln82_fu_516_p2 | icmp_ln82_1_fu_490_p2);

assign or_ln82_2_fu_544_p2 = (or_ln82_1_fu_538_p2 | icmp_ln82_fu_484_p2);

assign or_ln82_fu_516_p2 = (icmp_ln82_3_fu_502_p2 | icmp_ln82_2_fu_496_p2);

assign select_ln75_fu_574_p3 = ((icmp_ln75_fu_460_p2[0:0] == 1'b1) ? or_ln100_fu_568_p2 : and_ln107_fu_478_p2);

assign select_ln82_1_fu_522_p3 = ((icmp_ln82_1_fu_490_p2[0:0] == 1'b1) ? 3'd2 : 3'd3);

assign select_ln82_2_fu_530_p3 = ((or_ln82_fu_516_p2[0:0] == 1'b1) ? select_ln82_fu_508_p3 : select_ln82_1_fu_522_p3);

assign select_ln82_fu_508_p3 = ((icmp_ln82_3_fu_502_p2[0:0] == 1'b1) ? 3'd4 : 3'd1);

assign shl_ln2_fu_592_p3 = {{trunc_ln112_fu_588_p1}, {2'd0}};

assign tmp_fu_353_p4 = {{len_fu_142[63:7]}};

assign trunc_ln112_fu_588_p1 = len_fu_142[7:0];

assign xor_ln1023_fu_466_p2 = (ap_sig_allocacmp_dataPkt_last_V_3 ^ 1'd1);

assign xor_ln57_fu_375_p2 = (channel_error_1_fu_146 ^ 1'd1);

assign zext_ln100_fu_558_p1 = final_len_fu_550_p3;

assign zext_ln112_fu_640_p1 = lshr_ln_reg_733;

endmodule //SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4
