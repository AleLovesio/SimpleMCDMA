-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SimpleRxMCDMA is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    RX_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    RX_stream_TVALID : IN STD_LOGIC;
    RX_stream_TREADY : OUT STD_LOGIC;
    RX_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    RX_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    RX_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    RX_stream_TDEST : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SimpleRxMCDMA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SimpleRxMCDMA_SimpleRxMCDMA,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1994,HLS_SYN_LUT=4306,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_rst_sw : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal channel_descr_addr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_addr_ce0 : STD_LOGIC;
    signal channel_descr_addr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_len_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_len_ce0 : STD_LOGIC;
    signal channel_descr_len_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_enable_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_enable_ce0 : STD_LOGIC;
    signal channel_descr_enable_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_done_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_done_ce0 : STD_LOGIC;
    signal channel_descr_done_we0 : STD_LOGIC;
    signal channel_descr_done_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_done_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_error_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_error_ce0 : STD_LOGIC;
    signal channel_descr_error_we0 : STD_LOGIC;
    signal channel_descr_error_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_descr_transfered_data_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_descr_transfered_data_ce0 : STD_LOGIC;
    signal channel_descr_transfered_data_we0 : STD_LOGIC;
    signal channel_descr_transfered_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_index : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal RX_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln34_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_remaining_channels_tot_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal channel_descr_enable_load_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal n_remaining_channels_tot_3_fu_626_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_remaining_channels_tot_3_reg_998 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal n_remaining_channels_tot_4_fu_643_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_remaining_channels_tot_4_reg_1023 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal n_remaining_channels_2_fu_659_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_remaining_channels_2_reg_1031 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_data_V_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_1041 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_1051 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln46_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_descr_enable_load_3_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal channel_descr_len_addr_reg_1082 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln53_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_reg_1092 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_fu_741_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_reg_1100 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln53_fu_747_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln53_reg_1105 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln53_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1_fu_759_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1_reg_1113 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln117_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln117_reg_1127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal shl_ln_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal channel_descr_addr_load_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln117_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_1165 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_64_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_65_fu_838_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_65_reg_1174 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal buffer_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_done : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_idle : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_ready : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_ce0 : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_we0 : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_RX_stream_TREADY : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_data_V_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_data_V_2_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_keep_V_2_out : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_keep_V_2_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_last_V_3_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_last_V_3_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_dest_V_3_out : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_dest_V_3_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_channel_error_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_channel_error_1_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_first_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_first_1_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_len_remaining_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_len_remaining_2_out_ap_vld : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_done : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_idle : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_ready : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_ce0 : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_done : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_idle : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_ready : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_RX_stream_TREADY : STD_LOGIC;
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_tmp_dest_V_2_out : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_tmp_dest_V_2_out_ap_vld : STD_LOGIC;
    signal flush : STD_LOGIC;
    signal s_axi_s_axi_ctrl_flush_done : STD_LOGIC;
    signal m_axi_mem_flush_done : STD_LOGIC;
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_RVALID : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_transfers_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal dataPkt_data_V_1_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataPkt_keep_V_1_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataPkt_last_V_1_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataPkt_dest_V_1_reg_476 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_error_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_remaining_1_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataPkt_dest_416_reg_520 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_dest_V_2_loc_fu_150 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln121_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln137_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln118_fu_843_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal n_remaining_channels_fu_146 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal sub_ln186_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_fu_606_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_fu_603_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_remaining_channels_tot_1_fu_613_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_remaining_channels_tot_2_fu_620_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_1_fu_634_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_fu_637_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln_fu_690_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_fu_686_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1023_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1514_fu_700_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln51_fu_710_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mem_transfers_tot_fu_714_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln53_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln117_fu_755_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_813_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal regslice_both_RX_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal RX_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal RX_stream_TVALID_int_regslice : STD_LOGIC;
    signal RX_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_RX_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_RX_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal RX_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_RX_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_RX_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_RX_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal RX_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_RX_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_RX_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_RX_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal RX_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_RX_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_RX_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_RX_stream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal RX_stream_TDEST_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_RX_stream_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_RX_stream_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RX_stream_TVALID : IN STD_LOGIC;
        dataPkt_data_V_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dataPkt_keep_V_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dataPkt_last_V_1 : IN STD_LOGIC_VECTOR (0 downto 0);
        dataPkt_dest_V_1 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_error : IN STD_LOGIC_VECTOR (0 downto 0);
        first : IN STD_LOGIC_VECTOR (0 downto 0);
        len_remaining_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        shl_ln1 : IN STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        RX_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        RX_stream_TREADY : OUT STD_LOGIC;
        RX_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        RX_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        RX_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        RX_stream_TDEST : IN STD_LOGIC_VECTOR (1 downto 0);
        tmp_dest_V : IN STD_LOGIC_VECTOR (1 downto 0);
        dataPkt_data_V_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        dataPkt_data_V_2_out_ap_vld : OUT STD_LOGIC;
        dataPkt_keep_V_2_out : OUT STD_LOGIC_VECTOR (3 downto 0);
        dataPkt_keep_V_2_out_ap_vld : OUT STD_LOGIC;
        dataPkt_last_V_3_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        dataPkt_last_V_3_out_ap_vld : OUT STD_LOGIC;
        dataPkt_dest_V_3_out : OUT STD_LOGIC_VECTOR (1 downto 0);
        dataPkt_dest_V_3_out_ap_vld : OUT STD_LOGIC;
        channel_error_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        channel_error_1_out_ap_vld : OUT STD_LOGIC;
        first_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        first_1_out_ap_vld : OUT STD_LOGIC;
        len_remaining_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        len_remaining_2_out_ap_vld : OUT STD_LOGIC );
    end component;


    component SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        shl_ln1 : IN STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shl_ln : IN STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_addr_load : IN STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_addr_load_cast : IN STD_LOGIC_VECTOR (1 downto 0);
        p_cast23 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RX_stream_TVALID : IN STD_LOGIC;
        RX_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        RX_stream_TREADY : OUT STD_LOGIC;
        RX_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        RX_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        RX_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        RX_stream_TDEST : IN STD_LOGIC_VECTOR (1 downto 0);
        tmp_dest_V_2_out : OUT STD_LOGIC_VECTOR (1 downto 0);
        tmp_dest_V_2_out_ap_vld : OUT STD_LOGIC );
    end component;


    component SimpleRxMCDMA_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SimpleRxMCDMA_s_axi_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        sw_reset : OUT STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        channel_descr_addr_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_addr_ce0 : IN STD_LOGIC;
        channel_descr_addr_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_len_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_len_ce0 : IN STD_LOGIC;
        channel_descr_len_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        channel_descr_enable_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_enable_ce0 : IN STD_LOGIC;
        channel_descr_enable_q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        channel_descr_done_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_done_ce0 : IN STD_LOGIC;
        channel_descr_done_we0 : IN STD_LOGIC;
        channel_descr_done_d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        channel_descr_done_q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        channel_descr_error_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_error_ce0 : IN STD_LOGIC;
        channel_descr_error_we0 : IN STD_LOGIC;
        channel_descr_error_d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        channel_descr_transfered_data_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_descr_transfered_data_ce0 : IN STD_LOGIC;
        channel_descr_transfered_data_we0 : IN STD_LOGIC;
        channel_descr_transfered_data_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flush : OUT STD_LOGIC;
        flush_done : IN STD_LOGIC );
    end component;


    component SimpleRxMCDMA_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        flush : IN STD_LOGIC;
        flush_done : OUT STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component SimpleRxMCDMA_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    buffer_U : component SimpleRxMCDMA_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_d0,
        q0 => buffer_q0);

    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532 : component SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start,
        ap_done => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_done,
        ap_idle => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_idle,
        ap_ready => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_ready,
        RX_stream_TVALID => RX_stream_TVALID_int_regslice,
        dataPkt_data_V_1 => dataPkt_data_V_1_reg_446,
        dataPkt_keep_V_1 => dataPkt_keep_V_1_reg_456,
        dataPkt_last_V_1 => dataPkt_last_V_1_reg_466,
        dataPkt_dest_V_1 => dataPkt_dest_V_1_reg_476,
        channel_error => channel_error_reg_486,
        first => first_reg_498,
        len_remaining_1 => len_remaining_1_reg_510,
        shl_ln1 => shl_ln1_reg_1113,
        buffer_r_address0 => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_address0,
        buffer_r_ce0 => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_ce0,
        buffer_r_we0 => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_we0,
        buffer_r_d0 => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_d0,
        RX_stream_TDATA => RX_stream_TDATA_int_regslice,
        RX_stream_TREADY => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_RX_stream_TREADY,
        RX_stream_TKEEP => RX_stream_TKEEP_int_regslice,
        RX_stream_TSTRB => RX_stream_TSTRB_int_regslice,
        RX_stream_TLAST => RX_stream_TLAST_int_regslice,
        RX_stream_TDEST => RX_stream_TDEST_int_regslice,
        tmp_dest_V => tmp_dest_V_reg_1051,
        dataPkt_data_V_2_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_data_V_2_out,
        dataPkt_data_V_2_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_data_V_2_out_ap_vld,
        dataPkt_keep_V_2_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_keep_V_2_out,
        dataPkt_keep_V_2_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_keep_V_2_out_ap_vld,
        dataPkt_last_V_3_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_last_V_3_out,
        dataPkt_last_V_3_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_last_V_3_out_ap_vld,
        dataPkt_dest_V_3_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_dest_V_3_out,
        dataPkt_dest_V_3_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_dest_V_3_out_ap_vld,
        channel_error_1_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_channel_error_1_out,
        channel_error_1_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_channel_error_1_out_ap_vld,
        first_1_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_first_1_out,
        first_1_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_first_1_out_ap_vld,
        len_remaining_2_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_len_remaining_2_out,
        len_remaining_2_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_len_remaining_2_out_ap_vld);

    grp_SimpleRxMCDMA_Pipeline_2_fu_570 : component SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start,
        ap_done => grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_done,
        ap_idle => grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_idle,
        ap_ready => grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_ready,
        m_axi_mem_AWVALID => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => mem_AWREADY,
        m_axi_mem_AWADDR => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WVALID,
        m_axi_mem_WREADY => mem_WREADY,
        m_axi_mem_WDATA => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => ap_const_logic_0,
        m_axi_mem_ARADDR => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => ap_const_logic_0,
        m_axi_mem_RREADY => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_RREADY,
        m_axi_mem_RDATA => ap_const_lv32_0,
        m_axi_mem_RLAST => ap_const_logic_0,
        m_axi_mem_RID => ap_const_lv1_0,
        m_axi_mem_RFIFONUM => ap_const_lv9_0,
        m_axi_mem_RUSER => ap_const_lv1_0,
        m_axi_mem_RRESP => ap_const_lv2_0,
        m_axi_mem_BVALID => mem_BVALID,
        m_axi_mem_BREADY => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        shl_ln1 => shl_ln1_reg_1113,
        buffer_r_address0 => grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_address0,
        buffer_r_ce0 => grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        shl_ln => shl_ln_reg_1137,
        channel_descr_addr_load => channel_descr_addr_load_reg_1160,
        channel_descr_addr_load_cast => empty_65_reg_1174,
        p_cast23 => empty_64_reg_1169);

    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583 : component SimpleRxMCDMA_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start,
        ap_done => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_done,
        ap_idle => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_idle,
        ap_ready => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_ready,
        RX_stream_TVALID => RX_stream_TVALID_int_regslice,
        RX_stream_TDATA => RX_stream_TDATA_int_regslice,
        RX_stream_TREADY => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_RX_stream_TREADY,
        RX_stream_TKEEP => RX_stream_TKEEP_int_regslice,
        RX_stream_TSTRB => RX_stream_TSTRB_int_regslice,
        RX_stream_TLAST => RX_stream_TLAST_int_regslice,
        RX_stream_TDEST => RX_stream_TDEST_int_regslice,
        tmp_dest_V_2_out => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_tmp_dest_V_2_out,
        tmp_dest_V_2_out_ap_vld => grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_tmp_dest_V_2_out_ap_vld);

    s_axi_ctrl_s_axi_U : component SimpleRxMCDMA_s_axi_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_s_axi_ctrl_AWVALID,
        AWREADY => s_axi_s_axi_ctrl_AWREADY,
        AWADDR => s_axi_s_axi_ctrl_AWADDR,
        WVALID => s_axi_s_axi_ctrl_WVALID,
        WREADY => s_axi_s_axi_ctrl_WREADY,
        WDATA => s_axi_s_axi_ctrl_WDATA,
        WSTRB => s_axi_s_axi_ctrl_WSTRB,
        ARVALID => s_axi_s_axi_ctrl_ARVALID,
        ARREADY => s_axi_s_axi_ctrl_ARREADY,
        ARADDR => s_axi_s_axi_ctrl_ARADDR,
        RVALID => s_axi_s_axi_ctrl_RVALID,
        RREADY => s_axi_s_axi_ctrl_RREADY,
        RDATA => s_axi_s_axi_ctrl_RDATA,
        RRESP => s_axi_s_axi_ctrl_RRESP,
        BVALID => s_axi_s_axi_ctrl_BVALID,
        BREADY => s_axi_s_axi_ctrl_BREADY,
        BRESP => s_axi_s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        sw_reset => ap_rst_sw,
        ACLK_EN => ap_const_logic_1,
        channel_descr_addr_address0 => channel_descr_addr_address0,
        channel_descr_addr_ce0 => channel_descr_addr_ce0,
        channel_descr_addr_q0 => channel_descr_addr_q0,
        channel_descr_len_address0 => channel_descr_len_address0,
        channel_descr_len_ce0 => channel_descr_len_ce0,
        channel_descr_len_q0 => channel_descr_len_q0,
        channel_descr_enable_address0 => channel_descr_enable_address0,
        channel_descr_enable_ce0 => channel_descr_enable_ce0,
        channel_descr_enable_q0 => channel_descr_enable_q0,
        channel_descr_done_address0 => channel_descr_done_address0,
        channel_descr_done_ce0 => channel_descr_done_ce0,
        channel_descr_done_we0 => channel_descr_done_we0,
        channel_descr_done_d0 => channel_descr_done_d0,
        channel_descr_done_q0 => channel_descr_done_q0,
        channel_descr_error_address0 => channel_descr_error_address0,
        channel_descr_error_ce0 => channel_descr_error_ce0,
        channel_descr_error_we0 => channel_descr_error_we0,
        channel_descr_error_d0 => channel_descr_error_d0,
        channel_descr_transfered_data_address0 => channel_descr_transfered_data_address0,
        channel_descr_transfered_data_ce0 => channel_descr_transfered_data_ce0,
        channel_descr_transfered_data_we0 => channel_descr_transfered_data_we0,
        channel_descr_transfered_data_d0 => channel_descr_transfered_data_d0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flush => flush,
        flush_done => s_axi_s_axi_ctrl_flush_done);

    mem_m_axi_U : component SimpleRxMCDMA_mem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        flush => flush,
        flush_done => m_axi_mem_flush_done,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => mem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => mem_RDATA,
        I_RFIFONUM => mem_RFIFONUM,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWADDR,
        I_AWLEN => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWLEN,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WDATA,
        I_WSTRB => grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WSTRB,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY);

    regslice_both_RX_stream_V_data_V_U : component SimpleRxMCDMA_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => RX_stream_TDATA,
        vld_in => RX_stream_TVALID,
        ack_in => regslice_both_RX_stream_V_data_V_U_ack_in,
        data_out => RX_stream_TDATA_int_regslice,
        vld_out => RX_stream_TVALID_int_regslice,
        ack_out => RX_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_RX_stream_V_data_V_U_apdone_blk);

    regslice_both_RX_stream_V_keep_V_U : component SimpleRxMCDMA_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => RX_stream_TKEEP,
        vld_in => RX_stream_TVALID,
        ack_in => regslice_both_RX_stream_V_keep_V_U_ack_in,
        data_out => RX_stream_TKEEP_int_regslice,
        vld_out => regslice_both_RX_stream_V_keep_V_U_vld_out,
        ack_out => RX_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_RX_stream_V_keep_V_U_apdone_blk);

    regslice_both_RX_stream_V_strb_V_U : component SimpleRxMCDMA_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => RX_stream_TSTRB,
        vld_in => RX_stream_TVALID,
        ack_in => regslice_both_RX_stream_V_strb_V_U_ack_in,
        data_out => RX_stream_TSTRB_int_regslice,
        vld_out => regslice_both_RX_stream_V_strb_V_U_vld_out,
        ack_out => RX_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_RX_stream_V_strb_V_U_apdone_blk);

    regslice_both_RX_stream_V_last_V_U : component SimpleRxMCDMA_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => RX_stream_TLAST,
        vld_in => RX_stream_TVALID,
        ack_in => regslice_both_RX_stream_V_last_V_U_ack_in,
        data_out => RX_stream_TLAST_int_regslice,
        vld_out => regslice_both_RX_stream_V_last_V_U_vld_out,
        ack_out => RX_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_RX_stream_V_last_V_U_apdone_blk);

    regslice_both_RX_stream_V_dest_V_U : component SimpleRxMCDMA_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => RX_stream_TDEST,
        vld_in => RX_stream_TVALID,
        ack_in => regslice_both_RX_stream_V_dest_V_U_ack_in,
        data_out => RX_stream_TDEST_int_regslice,
        vld_out => regslice_both_RX_stream_V_dest_V_U_vld_out,
        ack_out => RX_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_RX_stream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln117_fu_807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_ready = ap_const_logic_1)) then 
                    grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_ready = ap_const_logic_1)) then 
                    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = and_ln53_fu_735_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_ready = ap_const_logic_1)) then 
                    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    channel_error_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                channel_error_reg_486 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                channel_error_reg_486 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_channel_error_1_out;
            end if; 
        end if;
    end process;

    dataPkt_data_V_1_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                dataPkt_data_V_1_reg_446 <= tmp_data_V_reg_1036;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dataPkt_data_V_1_reg_446 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_data_V_2_out;
            end if; 
        end if;
    end process;

    dataPkt_dest_416_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((channel_descr_enable_load_3_reg_1069 = ap_const_lv1_0) and (tmp_last_V_reg_1046 = ap_const_lv1_1)) or ((tmp_last_V_reg_1046 = ap_const_lv1_1) and (channel_descr_done_q0 = ap_const_lv1_1))))) then 
                dataPkt_dest_416_reg_520 <= tmp_dest_V_reg_1051;
            elsif (((channel_error_reg_486 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                dataPkt_dest_416_reg_520 <= dataPkt_dest_V_1_reg_476;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                dataPkt_dest_416_reg_520 <= tmp_dest_V_2_loc_fu_150;
            end if; 
        end if;
    end process;

    dataPkt_dest_V_1_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                dataPkt_dest_V_1_reg_476 <= tmp_dest_V_reg_1051;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dataPkt_dest_V_1_reg_476 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_dest_V_3_out;
            end if; 
        end if;
    end process;

    dataPkt_keep_V_1_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                dataPkt_keep_V_1_reg_456 <= tmp_keep_V_reg_1041;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dataPkt_keep_V_1_reg_456 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_keep_V_2_out;
            end if; 
        end if;
    end process;

    dataPkt_last_V_1_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                dataPkt_last_V_1_reg_466 <= tmp_last_V_reg_1046;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dataPkt_last_V_1_reg_466 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_last_V_3_out;
            end if; 
        end if;
    end process;

    first_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                first_reg_498 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                first_reg_498 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_first_1_out;
            end if; 
        end if;
    end process;

    len_remaining_1_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                len_remaining_1_reg_510 <= channel_descr_len_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                len_remaining_1_reg_510 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_len_remaining_2_out;
            end if; 
        end if;
    end process;

    mem_transfers_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                mem_transfers_reg_435 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                mem_transfers_reg_435 <= add_ln53_reg_1100;
            end if; 
        end if;
    end process;

    n_remaining_channels_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_remaining_channels_fu_146 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                n_remaining_channels_fu_146 <= n_remaining_channels_2_reg_1031;
            end if; 
        end if;
    end process;

    s_axi_s_axi_ctrl_flush_done_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            s_axi_s_axi_ctrl_flush_done <= (m_axi_mem_flush_done);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln53_reg_1100 <= add_ln53_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                buffer_index <= add_ln118_fu_843_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                channel_descr_addr_load_reg_1160 <= channel_descr_addr_q0;
                icmp_ln117_reg_1165 <= icmp_ln117_fu_807_p2;
                    shl_ln_reg_1137(31 downto 9) <= shl_ln_fu_781_p3(31 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                channel_descr_enable_load_3_reg_1069 <= channel_descr_enable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                channel_descr_enable_load_reg_973 <= channel_descr_enable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((channel_descr_enable_load_3_reg_1069 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (channel_descr_done_q0 = ap_const_lv1_0))) then
                channel_descr_len_addr_reg_1082 <= zext_ln46_reg_1058(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                empty_64_reg_1169 <= empty_64_fu_829_p3;
                empty_65_reg_1174 <= empty_65_fu_838_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_remaining_channels_2_reg_1031 <= n_remaining_channels_2_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                n_remaining_channels_tot_3_reg_998 <= n_remaining_channels_tot_3_fu_626_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_remaining_channels_tot_4_reg_1023 <= n_remaining_channels_tot_4_fu_643_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_remaining_channels_tot_reg_947 <= channel_descr_enable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln53_fu_735_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    shl_ln1_reg_1113(9) <= shl_ln1_fu_759_p3(9);
                trunc_ln53_reg_1105 <= trunc_ln53_fu_747_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) then
                tmp_data_V_reg_1036 <= RX_stream_TDATA_int_regslice;
                tmp_dest_V_reg_1051 <= RX_stream_TDEST_int_regslice;
                tmp_keep_V_reg_1041 <= RX_stream_TKEEP_int_regslice;
                tmp_last_V_reg_1046 <= RX_stream_TLAST_int_regslice;
                    zext_ln46_reg_1058(1 downto 0) <= zext_ln46_fu_681_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_tmp_dest_V_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_dest_V_2_loc_fu_150 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_tmp_dest_V_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    zext_ln117_reg_1127(1 downto 0) <= zext_ln117_fu_776_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    zext_ln53_reg_1092(23 downto 0) <= zext_ln53_fu_720_p1(23 downto 0);
            end if;
        end if;
    end process;
    zext_ln46_reg_1058(31 downto 2) <= "000000000000000000000000000000";
    zext_ln53_reg_1092(63 downto 24) <= "0000000000000000000000000000000000000000";
    shl_ln1_reg_1113(8 downto 0) <= "000000000";
    zext_ln117_reg_1127(31 downto 2) <= "000000000000000000000000000000";
    shl_ln_reg_1137(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, channel_descr_done_q0, ap_CS_fsm_state6, icmp_ln34_fu_654_p2, tmp_last_V_reg_1046, channel_descr_enable_load_3_reg_1069, ap_CS_fsm_state8, ap_CS_fsm_state10, and_ln53_fu_735_p2, grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_done, grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_done, channel_error_reg_486, ap_CS_fsm_state16, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_block_state14_on_subcall_done, RX_stream_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not(((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((channel_descr_enable_load_3_reg_1069 = ap_const_lv1_0) and (tmp_last_V_reg_1046 = ap_const_lv1_1)) or ((tmp_last_V_reg_1046 = ap_const_lv1_1) and (channel_descr_done_q0 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (((tmp_last_V_reg_1046 = ap_const_lv1_0) and (channel_descr_done_q0 = ap_const_lv1_1)) or ((channel_descr_enable_load_3_reg_1069 = ap_const_lv1_0) and (tmp_last_V_reg_1046 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = and_ln53_fu_735_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state16 => 
                if (((channel_error_reg_486 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    RX_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_fu_654_p2, RX_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) then 
            RX_stream_TDATA_blk_n <= RX_stream_TVALID_int_regslice;
        else 
            RX_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    RX_stream_TREADY <= regslice_both_RX_stream_V_data_V_U_ack_in;

    RX_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_fu_654_p2, grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_RX_stream_TREADY, grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_RX_stream_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state18, RX_stream_TVALID_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) then 
            RX_stream_TREADY_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            RX_stream_TREADY_int_regslice <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_RX_stream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RX_stream_TREADY_int_regslice <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_RX_stream_TREADY;
        else 
            RX_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln118_fu_843_p2 <= std_logic_vector(unsigned(buffer_index) + unsigned(ap_const_lv8_1));
    add_ln26_fu_637_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_634_p1) + unsigned(ap_const_lv3_1));
    add_ln53_fu_741_p2 <= std_logic_vector(unsigned(mem_transfers_reg_435) + unsigned(ap_const_lv64_1));
    and_ln53_fu_735_p2 <= (xor_ln53_fu_729_p2 and icmp_ln53_fu_724_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_done)
    begin
        if ((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_done)
    begin
        if ((grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(icmp_ln34_fu_654_p2, RX_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state14_on_subcall_done_assign_proc : process(icmp_ln117_reg_1165, grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_done = ap_const_logic_0) and (icmp_ln117_reg_1165 = ap_const_lv1_0));
    end process;


    ap_block_state6_assign_proc : process(icmp_ln34_fu_654_p2, RX_stream_TVALID_int_regslice)
    begin
                ap_block_state6 <= ((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_fu_654_p2, RX_stream_TVALID_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_fu_654_p2, RX_stream_TVALID_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln34_fu_654_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n, ap_rst_sw)
    begin
        ap_rst_n_inv <= (not(ap_rst_n) or ap_rst_sw);
    end process;


    buffer_address0_assign_proc : process(icmp_ln117_reg_1165, grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_address0, grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_address0, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((icmp_ln117_reg_1165 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            buffer_address0 <= grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_address0 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(icmp_ln117_reg_1165, grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_ce0, grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_ce0, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((icmp_ln117_reg_1165 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            buffer_ce0 <= grp_SimpleRxMCDMA_Pipeline_2_fu_570_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_ce0 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we0_assign_proc : process(grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_we0 <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_buffer_r_we0;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_descr_addr_address0 <= zext_ln117_fu_776_p1(2 - 1 downto 0);

    channel_descr_addr_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            channel_descr_addr_ce0 <= ap_const_logic_1;
        else 
            channel_descr_addr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_done_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln46_reg_1058, ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln121_fu_768_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            channel_descr_done_address0 <= zext_ln121_fu_768_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            channel_descr_done_address0 <= zext_ln46_reg_1058(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            channel_descr_done_address0 <= ap_const_lv32_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_done_address0 <= ap_const_lv32_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            channel_descr_done_address0 <= ap_const_lv32_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            channel_descr_done_address0 <= ap_const_lv32_0(2 - 1 downto 0);
        else 
            channel_descr_done_address0 <= "XX";
        end if; 
    end process;


    channel_descr_done_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            channel_descr_done_ce0 <= ap_const_logic_1;
        else 
            channel_descr_done_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_done_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            channel_descr_done_d0 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            channel_descr_done_d0 <= ap_const_lv1_0;
        else 
            channel_descr_done_d0 <= "X";
        end if; 
    end process;


    channel_descr_done_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state10, and_ln53_fu_735_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = and_ln53_fu_735_p2)))) then 
            channel_descr_done_we0 <= ap_const_logic_1;
        else 
            channel_descr_done_we0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_enable_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln46_fu_681_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            channel_descr_enable_address0 <= zext_ln46_fu_681_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            channel_descr_enable_address0 <= ap_const_lv32_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_enable_address0 <= ap_const_lv32_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            channel_descr_enable_address0 <= ap_const_lv32_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            channel_descr_enable_address0 <= ap_const_lv32_0(2 - 1 downto 0);
        else 
            channel_descr_enable_address0 <= "XX";
        end if; 
    end process;


    channel_descr_enable_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln34_fu_654_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, RX_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_const_logic_0 = RX_stream_TVALID_int_regslice) and (icmp_ln34_fu_654_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            channel_descr_enable_ce0 <= ap_const_logic_1;
        else 
            channel_descr_enable_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_error_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state20, zext_ln137_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            channel_descr_error_address0 <= zext_ln137_fu_863_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            channel_descr_error_address0 <= ap_const_lv32_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_error_address0 <= ap_const_lv32_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            channel_descr_error_address0 <= ap_const_lv32_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            channel_descr_error_address0 <= ap_const_lv32_0(2 - 1 downto 0);
        else 
            channel_descr_error_address0 <= "XX";
        end if; 
    end process;


    channel_descr_error_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            channel_descr_error_ce0 <= ap_const_logic_1;
        else 
            channel_descr_error_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_error_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            channel_descr_error_d0 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            channel_descr_error_d0 <= ap_const_lv1_0;
        else 
            channel_descr_error_d0 <= "X";
        end if; 
    end process;


    channel_descr_error_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            channel_descr_error_we0 <= ap_const_logic_1;
        else 
            channel_descr_error_we0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_len_address0_assign_proc : process(zext_ln46_reg_1058, ap_CS_fsm_state8, channel_descr_len_addr_reg_1082, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            channel_descr_len_address0 <= channel_descr_len_addr_reg_1082;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            channel_descr_len_address0 <= zext_ln46_reg_1058(2 - 1 downto 0);
        else 
            channel_descr_len_address0 <= "XX";
        end if; 
    end process;


    channel_descr_len_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            channel_descr_len_ce0 <= ap_const_logic_1;
        else 
            channel_descr_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_transfered_data_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln117_reg_1127, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            channel_descr_transfered_data_address0 <= zext_ln117_reg_1127(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            channel_descr_transfered_data_address0 <= ap_const_lv32_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            channel_descr_transfered_data_address0 <= ap_const_lv32_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            channel_descr_transfered_data_address0 <= ap_const_lv32_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            channel_descr_transfered_data_address0 <= ap_const_lv32_0(2 - 1 downto 0);
        else 
            channel_descr_transfered_data_address0 <= "XX";
        end if; 
    end process;


    channel_descr_transfered_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            channel_descr_transfered_data_ce0 <= ap_const_logic_1;
        else 
            channel_descr_transfered_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_descr_transfered_data_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, sub_ln186_fu_854_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            channel_descr_transfered_data_d0 <= sub_ln186_fu_854_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            channel_descr_transfered_data_d0 <= ap_const_lv32_0;
        else 
            channel_descr_transfered_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    channel_descr_transfered_data_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            channel_descr_transfered_data_we0 <= ap_const_logic_1;
        else 
            channel_descr_transfered_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_64_fu_829_p3 <= 
        len_remaining_1_reg_510 when (icmp_fu_823_p2(0) = '1') else 
        ap_const_lv32_200;
    empty_65_fu_838_p1 <= channel_descr_addr_q0(2 - 1 downto 0);
    grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start <= grp_SimpleRxMCDMA_Pipeline_2_fu_570_ap_start_reg;
    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_128_5_fu_583_ap_start_reg;
    grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start <= grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_ap_start_reg;
    icmp_fu_823_p2 <= "1" when (signed(tmp_fu_813_p4) < signed(ap_const_lv23_1)) else "0";
    icmp_ln1023_fu_704_p2 <= "0" when (ret_V_fu_686_p1 = ap_const_lv9_0) else "1";
    icmp_ln117_fu_807_p2 <= "1" when (len_remaining_1_reg_510 = ap_const_lv32_0) else "0";
    icmp_ln34_fu_654_p2 <= "1" when (n_remaining_channels_fu_146 = n_remaining_channels_tot_4_reg_1023) else "0";
    icmp_ln53_fu_724_p2 <= "1" when (signed(mem_transfers_reg_435) < signed(zext_ln53_reg_1092)) else "0";

    mem_AWVALID_assign_proc : process(ap_CS_fsm_state13, icmp_ln117_fu_807_p2, icmp_ln117_reg_1165, grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWVALID, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln117_reg_1165 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln117_fu_807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            mem_AWVALID <= grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_AWVALID;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state13, icmp_ln117_fu_807_p2, icmp_ln117_reg_1165, grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_BREADY, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln117_reg_1165 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln117_fu_807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            mem_BREADY <= grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_BREADY;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state13, icmp_ln117_fu_807_p2, icmp_ln117_reg_1165, grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WVALID, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln117_reg_1165 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln117_fu_807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            mem_WVALID <= grp_SimpleRxMCDMA_Pipeline_2_fu_570_m_axi_mem_WVALID;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mem_transfers_tot_fu_714_p2 <= std_logic_vector(unsigned(zext_ln1514_fu_700_p1) + unsigned(zext_ln51_fu_710_p1));
    n_remaining_channels_2_fu_659_p2 <= std_logic_vector(unsigned(n_remaining_channels_fu_146) + unsigned(ap_const_lv3_1));
    n_remaining_channels_tot_1_fu_613_p3 <= 
        select_ln26_fu_606_p3 when (channel_descr_enable_load_reg_973(0) = '1') else 
        zext_ln28_fu_603_p1;
    n_remaining_channels_tot_2_fu_620_p2 <= std_logic_vector(unsigned(n_remaining_channels_tot_1_fu_613_p3) + unsigned(ap_const_lv2_1));
    n_remaining_channels_tot_3_fu_626_p3 <= 
        n_remaining_channels_tot_2_fu_620_p2 when (channel_descr_enable_q0(0) = '1') else 
        n_remaining_channels_tot_1_fu_613_p3;
    n_remaining_channels_tot_4_fu_643_p3 <= 
        add_ln26_fu_637_p2 when (channel_descr_enable_q0(0) = '1') else 
        zext_ln28_1_fu_634_p1;
    ret_V_fu_686_p1 <= channel_descr_len_q0(9 - 1 downto 0);
    select_ln26_fu_606_p3 <= 
        ap_const_lv2_2 when (n_remaining_channels_tot_reg_947(0) = '1') else 
        ap_const_lv2_1;
    shl_ln1_fu_759_p3 <= (trunc_ln117_fu_755_p1 & ap_const_lv9_0);
    shl_ln_fu_781_p3 <= (trunc_ln53_reg_1105 & ap_const_lv9_0);
    sub_ln186_fu_854_p2 <= std_logic_vector(unsigned(channel_descr_len_q0) - unsigned(grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_len_remaining_2_out));
    tmp_fu_813_p4 <= len_remaining_1_reg_510(31 downto 9);
    trunc_ln117_fu_755_p1 <= buffer_index(1 - 1 downto 0);
    trunc_ln53_fu_747_p1 <= mem_transfers_reg_435(23 - 1 downto 0);
    trunc_ln_fu_690_p4 <= channel_descr_len_q0(31 downto 9);
    xor_ln53_fu_729_p2 <= (channel_error_reg_486 xor ap_const_lv1_1);
    zext_ln117_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_SimpleRxMCDMA_Pipeline_VITIS_LOOP_57_4_fu_532_dataPkt_dest_V_3_out),32));
    zext_ln121_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataPkt_dest_V_1_reg_476),32));
    zext_ln137_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataPkt_dest_416_reg_520),32));
    zext_ln1514_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_690_p4),24));
    zext_ln28_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_remaining_channels_tot_3_reg_998),3));
    zext_ln28_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_remaining_channels_tot_reg_947),2));
    zext_ln46_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RX_stream_TDEST_int_regslice),32));
    zext_ln51_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1023_fu_704_p2),24));
    zext_ln53_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_transfers_tot_fu_714_p2),64));
end behav;
